Lakes in Berland
#include <bits/stdc++.h>
using namespace std;
#define INF 0X3f3f3f3f
int sum;
int n, m;
int a[5000];
char map1[60][60];
int vis[60][60] = {0};
int dx[4] = {0, 0, 1, -1};
int dy[4] = {1, -1, 0, 0};
int cnt = 0;
int cnt3 = 0;
int flag = 0;
struct pop
{
    int w;
    int v;
} b[100000];
bool cmp1(pop x, pop y)
{
    return x.v < y.v;
}
void dfs(int y, int x)
{
    vis[y][x] = cnt;
    cnt3++;
    if (y == n || y == 1 || x == m || x == 1)
    {
        flag = 1;
    }
    for (int i = 0; i <= 3; i++)
    {
        if (y + dy[i] <= n && y + dy[i] >= 1 && x + dx[i] <= m && x + dx[i] >= 1 && vis[y+dy[i]][x+dx[i]] == 0&&map1[y+dy[i]][x+dx[i]]=='.')
        {
            dfs(y + dy[i], x + dx[i]);
        }
    }
}
int main()
{
    int k;
    while (scanf("%d %d %d", &n, &m, &k) != EOF)
    {
        for (int i = 1; i <= n; i++)
        {
            scanf("%s", map1[i] + 1);
        }
        int cnt2 = 0;
        for (int i = 1; i <= n; i++)
        {
            for (int j = 1; j <= m; j++)
            {
                if (map1[i][j] == '.' && vis[i][j] == 0)
                {
                    flag = 0;
                    cnt++;
                    cnt3 = 0;
                    dfs(i, j);
                    if (flag == 0)
                    {
                        b[++cnt2].w = cnt;
                        b[cnt2].v = cnt3;
                    }
                }
            }
        }
        int ans = 0;
        sort(b + 1, b + 1 + cnt2, cmp1);
        for (int i = 1; i <= cnt2 - k; i++)
        {
            ans += b[i].v;
        }
        printf("%d\n", ans);
        for (int i = 1; i <= n; i++)
        {
            for (int j = 1; j <= m; j++)
            {
                if(map1[i][j]=='*')
                {
                    printf("*");
                    continue;
                }
                int ff = 0;
                for (int p = 1; p <= cnt2 - k;p++)
                {
                    if(vis[i][j]==b[p].w)
                    {
                        ff = 1;
                        printf("*");
                        break;
                    }
                }
                if(ff==0)
                printf(".");
            }
            printf("\n");
        }
    }
}